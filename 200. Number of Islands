from collections import deque
class Solution:
    
    def is_valid(self, grid, next_x, next_y, seen):
        length = len(grid)
        wide = len(grid[0])
        return 0 <= next_x < length and 0 <= next_y < wide and (next_x, next_y) not in seen and grid[next_x][next_y] == "1"
            
    def BFS(self, i, j, seen):
        queue = collections.deque()
        queue.append((i, j))
        seen.add((i, j))
        while queue:
            head = queue.popleft()
            self.grid[head[0]][head[1]] = 0
            for direction in [(1, 0), (0, 1), (-1, 0), (0, -1)]:
                next_x = head[0] + direction[0]
                next_y = head[1] + direction[1]
                if not self.is_valid(self.grid, next_x, next_y, seen):
                    continue
                queue.append((next_x, next_y))
                seen.add((next_x, next_y))
                
    def dfs(self, grid, r, c):
        grid[r][c] = '0'
        directions = [(0,1), (0,-1), (-1,0), (1,0)]
        for d in directions:
            nr, nc = r + d[0], c + d[1]    
            if self.is_valid(grid, nr, nc) and grid[nr][nc] == '1':
                self.dfs(grid, nr, nc)
        
    def numIslands(self, grid: List[List[str]]) -> int:
        count = 0
        self.grid = grid
        seen = set()
        for i in range(len(grid)):
            for j in range(len(grid[i])):
                if grid[i][j] == "1" and (i, j) not in seen:
                    count += 1
                    self.BFS(i, j, seen)
                    
        return count
    
