class Solution:
    def subarraySum(self, nums: List[int], k: int) -> int:
        #prefix sum
        # count = 0
        # for i in range(1, len(nums)):
        #     nums[i] += nums[i - 1]
        # for start in range(len(nums)):
        #     if nums[start] == k:
        #         count += 1
        #     for end in range(start+1, len(nums)):
        #         if (nums[end] - nums[start]) == k:
        #             count += 1
        # return count
        
        #hashtable prefix sum
        count, cur_sum, res = {0: 1}, 0, 0
        for n in nums:
            #keep track of sum of all the elements so far
            cur_sum += n
            #If we can find a prefix sum in the map for sum-k, it means we can form sum == k using 
            #the elements after the element corresponding to that prefix sum till the current 
            #element (included). Count all such sums at each element.
            res += count.get(cur_sum - k, 0)
            count[cur_sum] = count.get(cur_sum, 0) + 1
        return res
