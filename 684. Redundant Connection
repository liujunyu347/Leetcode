class UnionFind(object):
    def __init__(self,n):
        self.father = {}
        for i in range(1, n+1):
            self.father[i] = i
            
    def find(self, node):
        path = []
        while self.father[node]!= node:
            node = self.father[node]
            path.append(node)
            print(path)
        for n in path:
            self.father[n] = node
        return node
    
    def query(self, a, b):
        return self.find(a) == self.find(b)
    def connect(self, a, b):
        self.father[self.find(a)] = self.find(b)

class Solution:
    def findRedundantConnection(self, edges: List[List[int]]) -> List[int]:
        if not edges: 
            return None
        uf = UnionFind(len(edges))
        
        for first, second in edges:
            #query询问两个点是否有相同老大哥，不同就合并下
            if not uf.query(first,second):
                uf.connect(first,second)
            #一直找到相同的出现，就不能再连了，不然是个环
            else:
                return (first, second)
        return None
